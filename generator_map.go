// +build ignore

package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"go/format"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strings"
)

const (
	url  = "https://raw.githubusercontent.com/google/material-design-icons/master/iconfont/MaterialIcons-Regular.ijmap"
	name = "map_gen.go"
)

var replace = map[string]string{
	" ":     "",
	"Http":  "HTTP",
	"Https": "HTTPS",
	"Dns":   "DNS",
}

func main() {
	resp, err := http.Get(url)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()
	data, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Fatal(err)
	}
	var out struct {
		Icons map[string]struct {
			Name string
		}
	}
	if err := json.Unmarshal(data, &out); err != nil {
		log.Fatal(err)
	}

	w := new(bytes.Buffer)
	fmt.Fprintln(w, "// GENERATED BY generate.go")
	fmt.Fprintln(w)
	fmt.Fprintln(w, "package materialicon")
	fmt.Fprintln(w)
	fmt.Fprintln(w, "const (")
	for char, icon := range out.Icons {
		id := icon.Name
		for f, t := range replace {
			id = strings.Replace(id, f, t, -1)
		}
		fmt.Fprintf(w, "Icon%s rune = 0x%s\n", id, char)
	}

	fmt.Fprintln(w, ")")
	wbytes := w.Bytes()

	b, err := format.Source(wbytes)
	if err != nil {
		os.Stderr.Write(wbytes)
		log.Fatal(err)
	}

	f, err := os.Create(name)
	if err != nil {
		log.Fatal(err)
	}
	if _, err := f.Write(b); err != nil {
		log.Fatal(err)
	}
	if err := f.Close(); err != nil {
		log.Fatal(err)
	}
}
